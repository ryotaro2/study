
●５月からの案件に向けての学習について

学習しておきたい項目

・GIT
・github
・GAEとGO言語
・jenkins

多分、CIってことなんで
・自動テスト？　多分だけど、GOのテストパッケージがあるので、それを使っているのかな？
・オートデプロイ？おっじでやるのか？

●Git　と Github
　これは使って慣れるしかない。
　基本のつかいかた。
　https://techacademy.jp/magazine/6235
　https://employment.en-japan.com/engineerhub/entry/2017/01/31/110000
　
　基本は、ローカルにGit入れて、cloneしてきて使うのかな。
　
　１．リモートのマスターをcloneする。（クライアントに持ってくる）
　２．クライアントにmasterができるので、そこからブランチを切る。
　３．ブランチに切り替えて開発をする。（masterでは開発をしない）
　４．一部終わったら、ローカルにコミットする。＞これは繰り返し。
　５．全部終わったら、remote側に、pushする。（remote側にブランチが増える。）
　６．で、管理者というか、マージする人とかにプルリクする（pull request)
　７．やり取り、レビューなどが会った後に、オッケーなら管理者？が、マージ（remoteのマスターに反映）する。
　
　８．次の開発にむけて、クライアントのmasterをリモートのmasterと同期化する。（リモートから更新する感じ）
　　　２に戻る。
　こんな感じかと思われます。
　
　ちがう？大体一緒みたいだけど。
　
ryotaro2

https://github.com/ryotaro2/study.git

　
　●github flow
　https://gist.github.com/Gab-km/3705015
　
     masterブランチのものは何であれデプロイ可能である
     新しい何かに取り組む際は、説明的な名前のブランチをmasterから作成する（例: new-oauth2-scopes）
     作成したブランチにローカルでコミットし、サーバー上の同じ名前のブランチにも定期的に作業内容をpushする
     フィードバックや助言が欲しい時、ブランチをマージしてもよいと思ったときは、 プルリクエスト を作成する
     他の誰かがレビューをして機能にOKを出してくれたら、あなたはコードをmasterへマージすることができる
     マージをしてmasterへpushしたら、直ちにデプロイをする
     　
     ①masterブランチから説明的な名前を付けたブランチを切って、開発
     ②開発が終わったら、作成したブランチにローカルでcommitし、サーバー上の同名ブランチにpushする
     ③アドバイスやFB、コードレビューをしてもらいたい時、もしくはブランチをマージする時にpull requestを出す
     ④必要があればコードを修正して再度commitとpush
     ⑤その場のルールによるが、再度コードレビューをしてもらってOKが出たら、masterブランチにマージする

　
●GAE（GCP)
　GAE自体にデプロイするとかは無いと信じているので、とりあえず割愛する。

　参考資料：やりたいならこんな感じ

     ・GCPのインストール関連
          MACばかりだが、Windowsも一応あった。GCPSDKのインストール等
          https://cloud.google.com/sdk/docs/quickstart-windows
          こっちのほうがいいかな。（GAE＆GO開発環境全般）
          https://qiita.com/karo-jp/items/9a5c8be7850c859111ac
     ・GO
     https://qiita.com/uryyyyyyy/items/e0fa2bf2a521fce7d431
     
     
●GOの開発環境等
　一応windowsのも。
　・GO開発環境（windows)
　https://qiita.com/karo-jp/items/9a5c8be7850c859111ac
　     visualstudioCodeでGO環境作ると、いろいろ追加インストールの際に、%GOPATH%に
　     なにやら勝手に色々と追加してくれている模様。
　
　基本的には、ここから派生で
　https://qiita.com/tenntenn/items/0e33a4959250d1a55045
　
　と言ってはみたが、、、、、
　
　開発まで、一通りこれでいいです。というか、コレ全部理解できてたら、基本問題無いと思う。
　https://astaxie.gitbooks.io/build-web-application-with-golang/content/ja/01.1.html
　
　・コーディングメモ
　
　こんなのがある。
　　・Linterツール（静的な構文解析ツール）
　　　構文解析を行って、潜在的なエラーとかそういうのを事前に洗い出してくれる。
　　　標準は、go vetっていうやつかな。
　　　
　　　ちなみに、vsCode入れた場合には、golintというのが勝手に入って、コメントの書き方まで口を出してくれる。
　     　チェック内容：https://blog.haramishio.xyz/post/000024/
　
　　・テスト
　　標準パッケージ(go test パッケージ名）で動く。ただ、assertは無いので、自分でif文を書く必要がある。
　　OSSとかでありそうな気もする。
　　　https://qiita.com/marnie_ms4/items/e51cc6d879cc9ad07af3
　

●JS
　angluarあたりを使うらしい。
　
●DEVOPS
　・今回は、とりあえずキーワードとしてのjenkinsおじさん。
　　BOSS系で使っているので、それを見てみると良いと思います。
　　
　　Boss系では、
　　　・Slackに始めるよ通知
　　　・svnからのソース取得
　　　・ビルド
　　　・Tomcat止めて、置き換えて、起動する
　　　・slackに結果通知
　　　
　　までを一括でやるようなJobを作っています。
　　
　　本来の使い方を綺麗にするなら
　　　・Gitから取得
　　　・ビルド（あるやつは）
　　　・テスト環境へのアップロード
　　　・自動テスト
　　　・本番環境へのアップロード（これは、場合に応じて）
　　　
　　あたりになるかと思われます。
　　　
　　とはいえ、プラグインが大量にあって、sshで接続してコマンド打つとかもできるので
　　使い方次第では、どこまででもいけます。
　　
　　リモートで入れるのであれば、
　　http://192.168.1.66:8087
　　で接続可能です。
　　
　　Version2以降は、CUIというか、設定ファイルベースのもあるようなので、
　　そちらは、別途確認したほうがいいかもしれない。
　　



